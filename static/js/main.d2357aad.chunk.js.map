{"version":3,"sources":["components/Cell.tsx","hooks/useCellState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","onClick","id","isLive","className","key","useCellState","useState","cellData","setCellData","isRunning","setIsRunning","generation","setGeneration","loop","setLoop","directions","CELL_SIZE","useEffect","generateCellData","setInterval","getNextGeneration","clearInterval","x","y","push","map","cell","neighbourCount","getNeighbourCount","parseInt","reduce","count","direction","neighbour","value","updateCellData","mode","App","cellClickHandler","event","cellId","currentTarget","disabled","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2357aad.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Types from '../types'\r\n\r\nconst Cell = ({onClick, id, isLive}: Types.ICell) => (\r\n    <div\r\n        className={isLive ? `cell live` : `cell`}\r\n        id={id}\r\n        key={id}\r\n        onClick={onClick}\r\n    ></div>\r\n)\r\n\r\nexport default Cell;\r\n","import { useState, useEffect } from 'react'\r\nimport * as Types from '../types'\r\n\r\nconst CELL_SIZE = 20\r\nconst BOARD_SIZE = 20 * 20\r\n\r\nconst useCellState = () => {\r\n\r\n  const [cellData, setCellData] = useState<Types.ICellData>()\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [generation, setGeneration] = useState(0)\r\n  const [loop, setLoop] = useState()\r\n\r\n  const directions = [1, -1, CELL_SIZE, -CELL_SIZE, (CELL_SIZE+1), -(CELL_SIZE+1), (CELL_SIZE-1), -(CELL_SIZE-1)]\r\n\r\n  useEffect(() => {\r\n    setCellData(generateCellData())\r\n  }, [])\r\n\r\n  useEffect(\r\n    () => {\r\n      if(isRunning) {\r\n        setLoop(\r\n          setInterval(() => {\r\n            setGeneration(generation + 1)\r\n            setCellData(getNextGeneration());\r\n          }, 100)\r\n        )\r\n      }\r\n  \r\n      return function cleanup() {\r\n        clearInterval(loop)\r\n      }\r\n    },\r\n    [cellData, isRunning]\r\n  )\r\n\r\n  const generateCellData = ():Types.ICellData => {\r\n    let cellData = []\r\n    let id = 0\r\n    for (let x = 0; x < CELL_SIZE; x++) {\r\n        for (let y = 0; y < CELL_SIZE; y++) {\r\n          cellData.push({ id, x, y, isLive: false })\r\n          id++\r\n        }\r\n    }\r\n    return cellData as Types.ICellData\r\n  }\r\n\r\n  const updateCellData = (id: string, mode: string) => {\r\n    switch(mode) {\r\n      case 'reset': \r\n        setIsRunning(false)\r\n        setGeneration(0)\r\n        setCellData(generateCellData()) \r\n        break;\r\n      case 'select': \r\n        setCellData(cellData?.map((cell) => \r\n          cell.id === parseInt(id) ? \r\n            { ...cell, isLive: !cell.isLive } :\r\n            cell\r\n        ) as Types.ICellData)\r\n        break;\r\n      case 'simulation':\r\n        setIsRunning(true)\r\n        break;              \r\n      default: break;              \r\n    }\r\n  }\r\n\r\n  const getNextGeneration = ():Types.ICellData => \r\n    cellData?.map((cell) => {\r\n      const neighbourCount = getNeighbourCount(cell)\r\n      let isLive = false\r\n      if(!cell.isLive && neighbourCount === 3) {\r\n        isLive = true\r\n      }\r\n      else if(cell.isLive && (neighbourCount === 2 || neighbourCount === 3)) {\r\n        isLive = true\r\n      }\r\n      else if(cell.isLive && neighbourCount < 2) {\r\n        isLive = false\r\n      }\r\n      else if (cell.isLive && neighbourCount > 3) {\r\n        isLive = false\r\n      }\r\n      return {\r\n        ...cell, isLive\r\n      }\r\n    }) as Types.ICellData\r\n\r\n  const wrapRow = (value:any) => (value + BOARD_SIZE) % (BOARD_SIZE)\r\n\r\n  const getNeighbourCount = (cell: Types.ICell):number => {\r\n    const id = parseInt(cell.id)\r\n    return directions.reduce((count, direction) => { \r\n      if(cellData){\r\n        let neighbour = cellData[wrapRow(id + direction)]\r\n        if(neighbour && neighbour.isLive){\r\n           count = count + 1\r\n        }\r\n      } \r\n      return count\r\n    }, 0);\r\n  }\r\n\r\n  return {\r\n    cellData,\r\n    updateCellData,\r\n    isRunning,\r\n    generation,\r\n    getNextGeneration,\r\n    setCellData,\r\n  } \r\n\r\n}\r\n\r\nexport default useCellState","import React, { MouseEvent } from 'react';\r\nimport Cell from './components/Cell'\r\nimport useCellState from './hooks/useCellState'\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n  const {cellData, updateCellData, isRunning, generation} = useCellState()\r\n\r\n  const cellClickHandler = (event: MouseEvent) => {\r\n    const cellId = event.currentTarget.id\r\n    updateCellData(cellId, 'select')\r\n  }\r\n\r\n  const resetHandler = () => updateCellData('', 'reset')\r\n\r\n  const simulateHandler = () => updateCellData('', 'simulation')\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        Cell Simulator\r\n      </header>\r\n      <section>\r\n        <div className=\"controls\">\r\n          <button className=\"btn btn-primary\" onClick={simulateHandler} disabled={ isRunning }>\r\n              Start\r\n          </button>\r\n          <button className=\"btn btn-red\" onClick={ resetHandler }>{isRunning ? 'Stop' : 'Reset'}</button>\r\n        </div>\r\n        <div className=\"cell-container\">\r\n          { cellData && cellData.map((item) => (\r\n            <Cell \r\n              {...item}\r\n              onClick={ cellClickHandler }\r\n            />\r\n          )) }\r\n        </div>\r\n        <div className=\"generation\">Generation : {generation}</div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}